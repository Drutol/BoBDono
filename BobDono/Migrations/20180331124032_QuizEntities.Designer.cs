// <auto-generated />
using BobDono.DataAccess.Database;
using BobDono.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BobDono.Migrations
{
    [DbContext(typeof(BobDatabaseContext))]
    [Migration("20180331124032_QuizEntities")]
    partial class QuizEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("BobDono.Models.Entities.Bracket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BracketStageId");

                    b.Property<long?>("FirstContenderId");

                    b.Property<long?>("LoserId");

                    b.Property<int>("Number");

                    b.Property<long?>("SecondContenderId");

                    b.Property<long?>("ThirdContenderId");

                    b.Property<long?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("BracketStageId");

                    b.HasIndex("FirstContenderId");

                    b.HasIndex("LoserId");

                    b.HasIndex("SecondContenderId");

                    b.HasIndex("ThirdContenderId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("BobDono.Models.Entities.BracketStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ElectionId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("Number");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("BracketStages");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Election", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AuthorId");

                    b.Property<string>("BracketMessagesIdsBlob");

                    b.Property<int>("CurrentState");

                    b.Property<string>("Description");

                    b.Property<int>("EntrantsPerUser");

                    b.Property<bool>("FeatureImageRequired");

                    b.Property<string>("Name");

                    b.Property<int>("StageCount");

                    b.Property<DateTime>("SubmissionsEndDate");

                    b.Property<DateTime>("SubmissionsStartDate");

                    b.Property<DateTime>("VotingEndDate");

                    b.Property<DateTime>("VotingStartDate");

                    b.Property<long>("_discordChannelId");

                    b.Property<long>("_openingMessageId");

                    b.Property<long>("_pendingVotingStartMessageId");

                    b.Property<long>("_resultsMessageId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("BobDono.Models.Entities.ElectionTheme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<long>("DiscordMessageId");

                    b.Property<DateTime>("ElectionCreateDate");

                    b.Property<long?>("ProposerId");

                    b.Property<string>("Title");

                    b.Property<bool>("Used");

                    b.HasKey("Id");

                    b.HasIndex("ProposerId");

                    b.ToTable("ElectionThemes");
                });

            modelBuilder.Entity("BobDono.Models.Entities.ExceptionReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AffectedUser");

                    b.Property<string>("Channel");

                    b.Property<string>("Command");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("ExceptionReports");
                });

            modelBuilder.Entity("BobDono.Models.Entities.HallOfFameMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommandName");

                    b.Property<long?>("ContenderId");

                    b.Property<long>("ContenderMessageId");

                    b.Property<string>("ElectionName");

                    b.Property<string>("ImageUrl");

                    b.Property<long>("InfoMessageId");

                    b.Property<long?>("OwnerId");

                    b.Property<long>("SeparatorMessageId");

                    b.Property<DateTime>("WinDate");

                    b.HasKey("Id");

                    b.HasIndex("ContenderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("HallOfFameMembers");
                });

            modelBuilder.Entity("BobDono.Models.Entities.JoinEntities.UserMatchup", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("MatchupId");

                    b.HasKey("UserId", "MatchupId");

                    b.HasIndex("MatchupId");

                    b.ToTable("UserMatchup");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Matchup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AuthorId");

                    b.Property<DateTime>("ChallengesEndDate");

                    b.Property<int>("CurrentState");

                    b.Property<string>("Description");

                    b.Property<long>("DiscordChannelId");

                    b.Property<string>("Name");

                    b.Property<long>("OpeningMessageId");

                    b.Property<DateTime>("SignupsEndDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Matchup");
                });

            modelBuilder.Entity("BobDono.Models.Entities.MatchupPair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DiscordMessageId");

                    b.Property<long?>("FirstId");

                    b.Property<string>("FirstNotes");

                    b.Property<string>("FirstParticipantsChallenge");

                    b.Property<DateTime>("FirstParticipantsChallengeCompletionDate");

                    b.Property<long?>("MatchupId");

                    b.Property<int>("Number");

                    b.Property<long?>("SecondId");

                    b.Property<string>("SecondNotes");

                    b.Property<string>("SecondParticipantsChallenge");

                    b.Property<DateTime>("SecondParticipantsChallengeCompletionDate");

                    b.HasKey("Id");

                    b.HasIndex("FirstId");

                    b.HasIndex("MatchupId");

                    b.HasIndex("SecondId");

                    b.ToTable("MatchupPair");
                });

            modelBuilder.Entity("BobDono.Models.Entities.MerchandiseItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageLink");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<long?>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("MerchandiseItems");
                });

            modelBuilder.Entity("BobDono.Models.Entities.QuizAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<bool>("IsCorrect");

                    b.Property<long?>("QuestionId");

                    b.Property<long?>("SessionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SessionId");

                    b.ToTable("QuizAnswer");
                });

            modelBuilder.Entity("BobDono.Models.Entities.QuizQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string[]>("Answers");

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Hint");

                    b.Property<int>("Points");

                    b.Property<string>("Question");

                    b.Property<int>("QuestionBatch");

                    b.Property<string>("ReactionFailure");

                    b.Property<string>("ReactionSuccess");

                    b.Property<int>("Set");

                    b.HasKey("Id");

                    b.ToTable("QuizQuestion");
                });

            modelBuilder.Entity("BobDono.Models.Entities.QuizSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdditonalScoreFromPreviousBatches");

                    b.Property<int?>("CompletedBatch");

                    b.Property<DateTime>("Finished");

                    b.Property<int>("QuestionsCount");

                    b.Property<int>("RemainingChances");

                    b.Property<int>("Score");

                    b.Property<int>("SessionBatch");

                    b.Property<int>("Set");

                    b.Property<DateTime>("Started");

                    b.Property<int>("Status");

                    b.Property<int>("TotalChances");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSession");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Simple.ElectionThemeChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DiscordChannelId");

                    b.Property<DateTime>("NextElection");

                    b.Property<long>("OpeningMessageId");

                    b.HasKey("Id");

                    b.ToTable("ElectionThemeChannels");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Simple.HallOfFameChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DiscordChannelId");

                    b.Property<long>("OpeningMessageId");

                    b.HasKey("Id");

                    b.ToTable("HallOfFameChannels");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Stats.ExecutedCommand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CallerHash");

                    b.Property<string>("CallerName");

                    b.Property<int>("CommandHash");

                    b.Property<string>("CommandName");

                    b.Property<bool>("Contextual");

                    b.Property<bool>("Existed");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("ExecutedCommands");
                });

            modelBuilder.Entity("BobDono.Models.Entities.TrueWaifu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FeatureImage");

                    b.Property<string>("ThumbImage");

                    b.Property<long?>("WaifuId");

                    b.HasKey("Id");

                    b.HasIndex("WaifuId");

                    b.ToTable("TrueWaifus");
                });

            modelBuilder.Entity("BobDono.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("Name");

                    b.Property<long?>("TrueWaifuId");

                    b.Property<long>("_discordId");

                    b.HasKey("Id");

                    b.HasIndex("TrueWaifuId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BobDono.Models.Entities.UserTheme", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("ThemeId");

                    b.HasKey("UserId", "ThemeId");

                    b.HasIndex("ThemeId");

                    b.ToTable("UserTheme");
                });

            modelBuilder.Entity("BobDono.Models.Entities.UserWaifu", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("WaifuId");

                    b.HasKey("UserId", "WaifuId");

                    b.HasIndex("WaifuId");

                    b.ToTable("UserWaifu");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BracketId");

                    b.Property<long?>("ContenderId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.HasIndex("ContenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Waifu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string[]>("Animeography");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("MalId");

                    b.Property<string[]>("Mangaography");

                    b.Property<string>("Name");

                    b.Property<string[]>("Voiceactors");

                    b.HasKey("Id");

                    b.ToTable("Waifus");
                });

            modelBuilder.Entity("BobDono.Models.Entities.WaifuContender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomImageUrl");

                    b.Property<long?>("ElectionId");

                    b.Property<string>("FeatureImage");

                    b.Property<bool>("Lost");

                    b.Property<long?>("ProposerId");

                    b.Property<int>("SeedNumber");

                    b.Property<long>("SubmissionEmbedId");

                    b.Property<long?>("WaifuId");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ProposerId");

                    b.HasIndex("WaifuId");

                    b.ToTable("WaifuContenders");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Bracket", b =>
                {
                    b.HasOne("BobDono.Models.Entities.BracketStage", "BracketStage")
                        .WithMany("Brackets")
                        .HasForeignKey("BracketStageId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "FirstContender")
                        .WithMany()
                        .HasForeignKey("FirstContenderId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "SecondContender")
                        .WithMany()
                        .HasForeignKey("SecondContenderId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "ThirdContender")
                        .WithMany()
                        .HasForeignKey("ThirdContenderId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.BracketStage", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Election", "Election")
                        .WithMany("BracketStages")
                        .HasForeignKey("ElectionId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Election", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "Author")
                        .WithMany("Elections")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.ElectionTheme", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "Proposer")
                        .WithMany()
                        .HasForeignKey("ProposerId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.HallOfFameMember", b =>
                {
                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Contender")
                        .WithMany()
                        .HasForeignKey("ContenderId");

                    b.HasOne("BobDono.Models.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.JoinEntities.UserMatchup", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Matchup", "Matchup")
                        .WithMany("Participants")
                        .HasForeignKey("MatchupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("MatchupsParticipatingIn")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDono.Models.Entities.Matchup", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "Author")
                        .WithMany("CreatedMatchups")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.MatchupPair", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "First")
                        .WithMany()
                        .HasForeignKey("FirstId");

                    b.HasOne("BobDono.Models.Entities.Matchup", "Matchup")
                        .WithMany("MatchupPairs")
                        .HasForeignKey("MatchupId");

                    b.HasOne("BobDono.Models.Entities.User", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.MerchandiseItem", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "Owner")
                        .WithMany("OwnedMerchandiseItems")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.QuizAnswer", b =>
                {
                    b.HasOne("BobDono.Models.Entities.QuizQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("BobDono.Models.Entities.QuizSession", "Session")
                        .WithMany("Answers")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.QuizSession", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.TrueWaifu", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Waifu", "Waifu")
                        .WithMany()
                        .HasForeignKey("WaifuId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.User", b =>
                {
                    b.HasOne("BobDono.Models.Entities.TrueWaifu", "TrueWaifu")
                        .WithOne("User")
                        .HasForeignKey("BobDono.Models.Entities.User", "TrueWaifuId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.UserTheme", b =>
                {
                    b.HasOne("BobDono.Models.Entities.ElectionTheme", "Theme")
                        .WithMany("Approvals")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("ElectionThemes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDono.Models.Entities.UserWaifu", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("Waifus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDono.Models.Entities.Waifu", "Waifu")
                        .WithMany("Users")
                        .HasForeignKey("WaifuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDono.Models.Entities.Vote", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Bracket", "Bracket")
                        .WithMany("Votes")
                        .HasForeignKey("BracketId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Contender")
                        .WithMany("Votes")
                        .HasForeignKey("ContenderId");

                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.WaifuContender", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Election", "Election")
                        .WithMany("Contenders")
                        .HasForeignKey("ElectionId");

                    b.HasOne("BobDono.Models.Entities.User", "Proposer")
                        .WithMany()
                        .HasForeignKey("ProposerId");

                    b.HasOne("BobDono.Models.Entities.Waifu", "Waifu")
                        .WithMany()
                        .HasForeignKey("WaifuId");
                });
#pragma warning restore 612, 618
        }
    }
}
