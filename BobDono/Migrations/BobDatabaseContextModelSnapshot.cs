// <auto-generated />
using BobDono.DataAccess.Database;
using BobDono.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BobDono.Migrations
{
    [DbContext(typeof(BobDatabaseContext))]
    partial class BobDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("BobDono.Models.Entities.Bracket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BracketStageId");

                    b.Property<long?>("FirstContenderId");

                    b.Property<long?>("LoserId");

                    b.Property<int>("Number");

                    b.Property<long?>("SecondContenderId");

                    b.Property<long?>("ThirdContenderId");

                    b.Property<long?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("BracketStageId");

                    b.HasIndex("FirstContenderId");

                    b.HasIndex("LoserId");

                    b.HasIndex("SecondContenderId");

                    b.HasIndex("ThirdContenderId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("BobDono.Models.Entities.BracketStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ElectionId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("BracketStages");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Election", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AuthorId");

                    b.Property<string>("BracketMessagesIdsBlob");

                    b.Property<int>("CurrentState");

                    b.Property<string>("Description");

                    b.Property<ulong>("DiscordChannelId");

                    b.Property<int>("EntrantsPerUser");

                    b.Property<string>("Name");

                    b.Property<ulong>("OpeningMessageId");

                    b.Property<ulong>("PendingVotingStartMessageId");

                    b.Property<ulong>("ResultsMessageId");

                    b.Property<int>("StageCount");

                    b.Property<DateTime>("SubmissionsEndDate");

                    b.Property<DateTime>("SubmissionsStartDate");

                    b.Property<DateTime>("VotingEndDate");

                    b.Property<DateTime>("VotingStartDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("BobDono.Models.Entities.TrueWaifu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FeatureImage");

                    b.Property<long?>("WaifuId");

                    b.HasKey("Id");

                    b.HasIndex("WaifuId");

                    b.ToTable("TrueWaifus");
                });

            modelBuilder.Entity("BobDono.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordId");

                    b.Property<string>("Name");

                    b.Property<long?>("TrueWaifuId");

                    b.HasKey("Id");

                    b.HasIndex("TrueWaifuId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BobDono.Models.Entities.UserWaifu", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("WaifuId");

                    b.HasKey("UserId", "WaifuId");

                    b.HasIndex("WaifuId");

                    b.ToTable("UserWaifu");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BracketId");

                    b.Property<long?>("ContenderId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.HasIndex("ContenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Waifu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("MalId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Waifus");
                });

            modelBuilder.Entity("BobDono.Models.Entities.WaifuContender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomImageUrl");

                    b.Property<long?>("ElectionId");

                    b.Property<bool>("Lost");

                    b.Property<long?>("ProposerId");

                    b.Property<int>("SeedNumber");

                    b.Property<long?>("WaifuId");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ProposerId");

                    b.HasIndex("WaifuId");

                    b.ToTable("WaifuContenders");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Bracket", b =>
                {
                    b.HasOne("BobDono.Models.Entities.BracketStage", "BracketStage")
                        .WithMany("Brackets")
                        .HasForeignKey("BracketStageId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "FirstContender")
                        .WithMany()
                        .HasForeignKey("FirstContenderId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "SecondContender")
                        .WithMany()
                        .HasForeignKey("SecondContenderId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "ThirdContender")
                        .WithMany()
                        .HasForeignKey("ThirdContenderId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.BracketStage", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Election", "Election")
                        .WithMany("BracketStages")
                        .HasForeignKey("ElectionId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.Election", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "Author")
                        .WithMany("Elections")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.TrueWaifu", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Waifu", "Waifu")
                        .WithMany()
                        .HasForeignKey("WaifuId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.User", b =>
                {
                    b.HasOne("BobDono.Models.Entities.TrueWaifu", "TrueWaifu")
                        .WithOne("User")
                        .HasForeignKey("BobDono.Models.Entities.User", "TrueWaifuId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.UserWaifu", b =>
                {
                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("Waifus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BobDono.Models.Entities.Waifu", "Waifu")
                        .WithMany("Users")
                        .HasForeignKey("WaifuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BobDono.Models.Entities.Vote", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Bracket", "Bracket")
                        .WithMany("Votes")
                        .HasForeignKey("BracketId");

                    b.HasOne("BobDono.Models.Entities.WaifuContender", "Contender")
                        .WithMany("Votes")
                        .HasForeignKey("ContenderId");

                    b.HasOne("BobDono.Models.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BobDono.Models.Entities.WaifuContender", b =>
                {
                    b.HasOne("BobDono.Models.Entities.Election", "Election")
                        .WithMany("Contenders")
                        .HasForeignKey("ElectionId");

                    b.HasOne("BobDono.Models.Entities.User", "Proposer")
                        .WithMany()
                        .HasForeignKey("ProposerId");

                    b.HasOne("BobDono.Models.Entities.Waifu", "Waifu")
                        .WithMany()
                        .HasForeignKey("WaifuId");
                });
#pragma warning restore 612, 618
        }
    }
}
